{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { VERSION, InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject, ReplaySubject, merge, defer, of, iif, from, throwError } from 'rxjs';\nimport { scan, filter, distinctUntilChanged, switchMap, mergeMap, shareReplay, concatMap, catchError, tap, takeUntil, withLatestFrom, map, take, pluck, first } from 'rxjs/operators';\nimport { __rest } from 'tslib';\nimport * as i1$1 from '@auth0/auth0-spa-js';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nexport { InMemoryCache, LocalStorageCache, User } from '@auth0/auth0-spa-js';\nimport { Router } from '@angular/router';\nimport * as i1 from '@angular/common';\nvar useragent = {\n  name: '@auth0/auth0-angular',\n  version: '1.11.1'\n};\nclass Auth0ClientFactory {\n  static createClient(configFactory) {\n    const config = configFactory.get();\n    if (!config) {\n      throw new Error('Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set');\n    }\n    const {\n        redirectUri,\n        clientId,\n        maxAge,\n        httpInterceptor\n      } = config,\n      rest = __rest(config, [\"redirectUri\", \"clientId\", \"maxAge\", \"httpInterceptor\"]);\n    return new Auth0Client(Object.assign(Object.assign({\n      redirect_uri: redirectUri || window.location.origin,\n      client_id: clientId,\n      max_age: maxAge\n    }, rest), {\n      auth0Client: {\n        name: useragent.name,\n        version: useragent.version,\n        env: {\n          'angular/core': VERSION.full\n        }\n      }\n    }));\n  }\n}\nconst Auth0ClientService = new InjectionToken('auth0.client');\n\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n * @param def The route definition type\n */\nfunction isHttpInterceptorRouteConfig(def) {\n  return typeof def !== 'string';\n}\n/**\n * Gets and sets configuration for the internal Auth0 client. This can be\n * used to provide configuration outside of using AuthModule.forRoot, i.e. from\n * a factory provided by APP_INITIALIZER.\n *\n * @usage\n *\n * ```js\n * // app.module.ts\n * // ---------------------------\n * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';\n *\n * // Provide an initializer function that returns a Promise\n * function configInitializer(\n *   http: HttpClient,\n *   config: AuthClientConfig\n * ) {\n *   return () =>\n *     http\n *       .get('/config')\n *       .toPromise()\n *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here\n * }\n *\n * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot\n * imports: [\n *   // other imports..\n *\n *   HttpClientModule,\n *   AuthModule.forRoot(),   //<- don't pass any config here\n * ],\n * providers: [\n *   {\n *     provide: APP_INITIALIZER,\n *     useFactory: configInitializer,    // <- pass your initializer function here\n *     deps: [HttpClient, AuthClientConfig],\n *     multi: true,\n *   },\n * ],\n * ```\n *\n */\nclass AuthClientConfig {\n  constructor(config) {\n    if (config) {\n      this.set(config);\n    }\n  }\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config) {\n    this.config = config;\n  }\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get() {\n    return this.config;\n  }\n}\nAuthClientConfig.ɵfac = function AuthClientConfig_Factory(t) {\n  return new (t || AuthClientConfig)(i0.ɵɵinject(AuthConfigService, 8));\n};\nAuthClientConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthClientConfig,\n  factory: AuthClientConfig.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthClientConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [AuthConfigService]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\nconst AuthConfigService = new InjectionToken('auth0-angular.config');\nclass AbstractNavigator {\n  constructor(location, injector) {\n    this.location = location;\n    try {\n      this.router = injector.get(Router);\n    } catch (_a) {}\n  }\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url) {\n    if (this.router) {\n      this.router.navigateByUrl(url);\n      return;\n    }\n    this.location.replaceState(url);\n  }\n}\nAbstractNavigator.ɵfac = function AbstractNavigator_Factory(t) {\n  return new (t || AbstractNavigator)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i0.Injector));\n};\nAbstractNavigator.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AbstractNavigator,\n  factory: AbstractNavigator.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractNavigator, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Location\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\n/**\n * Tracks the Authentication State for the SDK\n */\nclass AuthState {\n  constructor(auth0Client) {\n    this.auth0Client = auth0Client;\n    this.isLoadingSubject$ = new BehaviorSubject(true);\n    this.refresh$ = new Subject();\n    this.accessToken$ = new ReplaySubject(1);\n    this.errorSubject$ = new ReplaySubject(1);\n    /**\n     * Emits boolean values indicating the loading state of the SDK.\n     */\n    this.isLoading$ = this.isLoadingSubject$.asObservable();\n    /**\n     * Trigger used to pull User information from the Auth0Client.\n     * Triggers when the access token has changed.\n     */\n    this.accessTokenTrigger$ = this.accessToken$.pipe(scan((acc, current) => {\n      return {\n        previous: acc.current,\n        current\n      };\n    }, {\n      current: null,\n      previous: null\n    }), filter(({\n      previous,\n      current\n    }) => previous !== current));\n    /**\n     * Trigger used to pull User information from the Auth0Client.\n     * Triggers when an event occurs that needs to retrigger the User Profile information.\n     * Events: Login, Access Token change and Logout\n     */\n    this.isAuthenticatedTrigger$ = this.isLoading$.pipe(filter(loading => !loading), distinctUntilChanged(), switchMap(() =>\n    // To track the value of isAuthenticated over time, we need to merge:\n    //  - the current value\n    //  - the value whenever the access token changes. (this should always be true of there is an access token\n    //    but it is safer to pass this through this.auth0Client.isAuthenticated() nevertheless)\n    //  - the value whenever refreshState$ emits\n    merge(defer(() => this.auth0Client.isAuthenticated()), this.accessTokenTrigger$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())), this.refresh$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())))));\n    /**\n     * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n     * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n     */\n    this.isAuthenticated$ = this.isAuthenticatedTrigger$.pipe(distinctUntilChanged(), shareReplay(1));\n    /**\n     * Emits details about the authenticated user, or null if not authenticated.\n     */\n    this.user$ = this.isAuthenticatedTrigger$.pipe(concatMap(authenticated => authenticated ? this.auth0Client.getUser() : of(null)));\n    /**\n     * Emits ID token claims when authenticated, or null if not authenticated.\n     */\n    this.idTokenClaims$ = this.isAuthenticatedTrigger$.pipe(concatMap(authenticated => authenticated ? this.auth0Client.getIdTokenClaims() : of(null)));\n    /**\n     * Emits errors that occur during login, or when checking for an active session on startup.\n     */\n    this.error$ = this.errorSubject$.asObservable();\n  }\n  /**\n   * Update the isLoading state using the provided value\n   * @param isLoading The new value for isLoading\n   */\n  setIsLoading(isLoading) {\n    this.isLoadingSubject$.next(isLoading);\n  }\n  /**\n   * Refresh the state to ensure the `isAuthenticated`, `user$` and `idTokenClaims$`\n   * reflect the most up-to-date values from  Auth0Client.\n   */\n  refresh() {\n    this.refresh$.next();\n  }\n  /**\n   * Update the access token, doing so will also refresh the state.\n   * @param accessToken The new Access Token\n   */\n  setAccessToken(accessToken) {\n    this.accessToken$.next(accessToken);\n  }\n  /**\n   * Emits the error in the `error$` observable.\n   * @param error The new error\n   */\n  setError(error) {\n    this.errorSubject$.next(error);\n  }\n}\nAuthState.ɵfac = function AuthState_Factory(t) {\n  return new (t || AuthState)(i0.ɵɵinject(Auth0ClientService));\n};\nAuthState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthState,\n  factory: AuthState.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthState, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Auth0Client,\n      decorators: [{\n        type: Inject,\n        args: [Auth0ClientService]\n      }]\n    }];\n  }, null);\n})();\nclass AuthService {\n  constructor(auth0Client, configFactory, navigator, authState) {\n    this.auth0Client = auth0Client;\n    this.configFactory = configFactory;\n    this.navigator = navigator;\n    this.authState = authState;\n    this.appStateSubject$ = new ReplaySubject(1);\n    // https://stackoverflow.com/a/41177163\n    this.ngUnsubscribe$ = new Subject();\n    /**\n     * Emits boolean values indicating the loading state of the SDK.\n     */\n    this.isLoading$ = this.authState.isLoading$;\n    /**\n     * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n     * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n     */\n    this.isAuthenticated$ = this.authState.isAuthenticated$;\n    /**\n     * Emits details about the authenticated user, or null if not authenticated.\n     */\n    this.user$ = this.authState.user$;\n    /**\n     * Emits ID token claims when authenticated, or null if not authenticated.\n     */\n    this.idTokenClaims$ = this.authState.idTokenClaims$;\n    /**\n     * Emits errors that occur during login, or when checking for an active session on startup.\n     */\n    this.error$ = this.authState.error$;\n    /**\n     * Emits the value (if any) that was passed to the `loginWithRedirect` method call\n     * but only **after** `handleRedirectCallback` is first called\n     */\n    this.appState$ = this.appStateSubject$.asObservable();\n    const checkSessionOrCallback$ = isCallback => iif(() => isCallback, this.handleRedirectCallback(), defer(() => this.auth0Client.checkSession()));\n    this.shouldHandleCallback().pipe(switchMap(isCallback => checkSessionOrCallback$(isCallback).pipe(catchError(error => {\n      const config = this.configFactory.get();\n      this.navigator.navigateByUrl(config.errorPath || '/');\n      this.authState.setError(error);\n      return of(undefined);\n    }))), tap(() => {\n      this.authState.setIsLoading(false);\n    }), takeUntil(this.ngUnsubscribe$)).subscribe();\n  }\n  /**\n   * Called when the service is destroyed\n   */\n  ngOnDestroy() {\n    // https://stackoverflow.com/a/41177163\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n  /**\n   * ```js\n   * loginWithRedirect(options);\n   * ```\n   *\n   * Performs a redirect to `/authorize` using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated.\n   *\n   * @param options The login options\n   */\n  loginWithRedirect(options) {\n    return from(this.auth0Client.loginWithRedirect(options));\n  }\n  /**\n   * ```js\n   * await loginWithPopup(options);\n   * ```\n   *\n   * Opens a popup with the `/authorize` URL using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated. If the response is successful,\n   * results will be valid according to their expiration times.\n   *\n   * IMPORTANT: This method has to be called from an event handler\n   * that was started by the user like a button click, for example,\n   * otherwise the popup will be blocked in most browsers.\n   *\n   * @param options The login options\n   * @param config Configuration for the popup window\n   */\n  loginWithPopup(options, config) {\n    return from(this.auth0Client.loginWithPopup(options, config).then(() => {\n      this.authState.refresh();\n    }));\n  }\n  /**\n   * ```js\n   * logout();\n   * ```\n   *\n   * Clears the application session and performs a redirect to `/v2/logout`, using\n   * the parameters provided as arguments, to clear the Auth0 session.\n   * If the `federated` option is specified it also clears the Identity Provider session.\n   * If the `localOnly` option is specified, it only clears the application session.\n   * It is invalid to set both the `federated` and `localOnly` options to `true`,\n   * and an error will be thrown if you do.\n   * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n   *\n   * @param options The logout options\n   */\n  logout(options) {\n    const logout = this.auth0Client.logout(options) || of(null);\n    from(logout).subscribe(() => {\n      if (options === null || options === void 0 ? void 0 : options.localOnly) {\n        this.authState.refresh();\n      }\n    });\n  }\n  /**\n   * ```js\n   * getAccessTokenSilently(options).subscribe(token => ...)\n   * ```\n   *\n   * If there's a valid token stored, return it. Otherwise, opens an\n   * iframe with the `/authorize` URL using the parameters provided\n   * as arguments. Random and secure `state` and `nonce` parameters\n   * will be auto-generated. If the response is successful, results\n   * will be valid according to their expiration times.\n   *\n   * If refresh tokens are used, the token endpoint is called directly with the\n   * 'refresh_token' grant. If no refresh token is available to make this call,\n   * the SDK falls back to using an iframe to the '/authorize' URL.\n   *\n   * This method may use a web worker to perform the token call if the in-memory\n   * cache is used.\n   *\n   * If an `audience` value is given to this function, the SDK always falls\n   * back to using an iframe to make the token exchange.\n   *\n   * Note that in all cases, falling back to an iframe requires access to\n   * the `auth0` cookie, and thus will not work in browsers that block third-party\n   * cookies by default (Safari, Brave, etc).\n   *\n   * @param options The options for configuring the token fetch.\n   */\n  getAccessTokenSilently(options = {}) {\n    return of(this.auth0Client).pipe(concatMap(client => options.detailedResponse === true ? client.getTokenSilently(Object.assign(Object.assign({}, options), {\n      detailedResponse: true\n    })) : client.getTokenSilently(options)), tap(token => this.authState.setAccessToken(typeof token === 'string' ? token : token.access_token)), catchError(error => {\n      this.authState.setError(error);\n      this.authState.refresh();\n      return throwError(error);\n    }));\n  }\n  /**\n   * ```js\n   * getTokenWithPopup(options).subscribe(token => ...)\n   * ```\n   *\n   * Get an access token interactively.\n   *\n   * Opens a popup with the `/authorize` URL using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated. If the response is successful,\n   * results will be valid according to their expiration times.\n   */\n  getAccessTokenWithPopup(options) {\n    return of(this.auth0Client).pipe(concatMap(client => client.getTokenWithPopup(options)), tap(token => this.authState.setAccessToken(token)), catchError(error => {\n      this.authState.setError(error);\n      this.authState.refresh();\n      return throwError(error);\n    }));\n  }\n  /**\n   * ```js\n   * getUser(options).subscribe(user => ...);\n   * ```\n   *\n   * Returns the user information if available (decoded\n   * from the `id_token`).\n   *\n   * If you provide an audience or scope, they should match an existing Access Token\n   * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n   * scope and audience to look up the ID Token)\n   *\n   * @remarks\n   *\n   * The returned observable will emit once and then complete.\n   *\n   * @typeparam TUser The type to return, has to extend {@link User}.\n   * @param options The options to get the user\n   */\n  getUser(options) {\n    return defer(() => this.auth0Client.getUser(options));\n  }\n  /**\n   * ```js\n   * getIdTokenClaims(options).subscribe(claims => ...);\n   * ```\n   *\n   * Returns all claims from the id_token if available.\n   *\n   * If you provide an audience or scope, they should match an existing Access Token\n   * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n   * scope and audience to look up the ID Token)\n   *\n   * @remarks\n   *\n   * The returned observable will emit once and then complete.\n   *\n   * @param options The options to get the Id token claims\n   */\n  getIdTokenClaims(options) {\n    return defer(() => this.auth0Client.getIdTokenClaims(options));\n  }\n  /**\n   * ```js\n   * handleRedirectCallback(url).subscribe(result => ...)\n   * ```\n   *\n   * After the browser redirects back to the callback page,\n   * call `handleRedirectCallback` to handle success and error\n   * responses from Auth0. If the response is successful, results\n   * will be valid according to their expiration times.\n   *\n   * Calling this method also refreshes the authentication and user states.\n   *\n   * @param url The URL to that should be used to retrieve the `state` and `code` values. Defaults to `window.location.href` if not given.\n   */\n  handleRedirectCallback(url) {\n    return defer(() => this.auth0Client.handleRedirectCallback(url)).pipe(withLatestFrom(this.authState.isLoading$), tap(([result, isLoading]) => {\n      var _a;\n      if (!isLoading) {\n        this.authState.refresh();\n      }\n      const appState = result === null || result === void 0 ? void 0 : result.appState;\n      const target = (_a = appState === null || appState === void 0 ? void 0 : appState.target) !== null && _a !== void 0 ? _a : '/';\n      if (appState) {\n        this.appStateSubject$.next(appState);\n      }\n      this.navigator.navigateByUrl(target);\n    }), map(([result]) => result));\n  }\n  /**\n   * ```js\n   * buildAuthorizeUrl().subscribe(url => ...)\n   * ```\n   *\n   * Builds an `/authorize` URL for loginWithRedirect using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated.\n   * @param options The options\n   * @returns A URL to the authorize endpoint\n   */\n  buildAuthorizeUrl(options) {\n    return defer(() => this.auth0Client.buildAuthorizeUrl(options));\n  }\n  /**\n   * ```js\n   * buildLogoutUrl().subscribe(url => ...)\n   * ```\n   * Builds a URL to the logout endpoint.\n   *\n   * @param options The options used to configure the parameters that appear in the logout endpoint URL.\n   * @returns a URL to the logout endpoint using the parameters provided as arguments.\n   */\n  buildLogoutUrl(options) {\n    return of(this.auth0Client.buildLogoutUrl(options));\n  }\n  shouldHandleCallback() {\n    return of(location.search).pipe(map(search => {\n      return (search.includes('code=') || search.includes('error=')) && search.includes('state=') && !this.configFactory.get().skipRedirectCallback;\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(Auth0ClientService), i0.ɵɵinject(AuthClientConfig), i0.ɵɵinject(AbstractNavigator), i0.ɵɵinject(AuthState));\n};\nAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Auth0Client,\n      decorators: [{\n        type: Inject,\n        args: [Auth0ClientService]\n      }]\n    }, {\n      type: AuthClientConfig\n    }, {\n      type: AbstractNavigator\n    }, {\n      type: AuthState\n    }];\n  }, null);\n})();\nclass AuthGuard {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  canLoad(route, segments) {\n    return this.auth.isAuthenticated$.pipe(take(1));\n  }\n  canActivate(next, state) {\n    return this.redirectIfUnauthenticated(state);\n  }\n  canActivateChild(childRoute, state) {\n    return this.redirectIfUnauthenticated(state);\n  }\n  redirectIfUnauthenticated(state) {\n    return this.auth.isAuthenticated$.pipe(tap(loggedIn => {\n      if (!loggedIn) {\n        this.auth.loginWithRedirect({\n          appState: {\n            target: state.url\n          }\n        });\n      }\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(AuthService));\n};\nAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: AuthService\n    }];\n  }, null);\n})();\nclass AuthModule {\n  /**\n   * Initialize the authentication module system. Configuration can either be specified here,\n   * or by calling AuthClientConfig.set (perhaps from an APP_INITIALIZER factory function).\n   * @param config The optional configuration for the SDK.\n   */\n  static forRoot(config) {\n    return {\n      ngModule: AuthModule,\n      providers: [AuthService, AuthGuard, {\n        provide: AuthConfigService,\n        useValue: config\n      }, {\n        provide: Auth0ClientService,\n        useFactory: Auth0ClientFactory.createClient,\n        deps: [AuthClientConfig]\n      }]\n    };\n  }\n}\nAuthModule.ɵfac = function AuthModule_Factory(t) {\n  return new (t || AuthModule)();\n};\nAuthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthModule\n});\nAuthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule\n  }], null, null);\n})();\nclass AuthHttpInterceptor {\n  constructor(configFactory, auth0Client, authState) {\n    this.configFactory = configFactory;\n    this.auth0Client = auth0Client;\n    this.authState = authState;\n  }\n  intercept(req, next) {\n    var _a;\n    const config = this.configFactory.get();\n    if (!((_a = config.httpInterceptor) === null || _a === void 0 ? void 0 : _a.allowedList)) {\n      return next.handle(req);\n    }\n    return this.findMatchingRoute(req, config.httpInterceptor).pipe(concatMap(route => iif(\n    // Check if a route was matched\n    () => route !== null,\n    // If we have a matching route, call getTokenSilently and attach the token to the\n    // outgoing request\n    of(route).pipe(pluck('tokenOptions'), concatMap(options => {\n      return this.getAccessTokenSilently(options).pipe(catchError(err => {\n        if (this.allowAnonymous(route, err)) {\n          return of('');\n        }\n        this.authState.setError(err);\n        return throwError(err);\n      }));\n    }), switchMap(token => {\n      // Clone the request and attach the bearer token\n      const clone = token ? req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      }) : req;\n      return next.handle(clone);\n    })),\n    // If the URI being called was not found in our httpInterceptor config, simply\n    // pass the request through without attaching a token\n    next.handle(req))));\n  }\n  /**\n   * Duplicate of AuthService.getAccessTokenSilently, but with a slightly different error handling.\n   * Only used internally in the interceptor.\n   * @param options The options for configuring the token fetch.\n   */\n  getAccessTokenSilently(options) {\n    return of(this.auth0Client).pipe(concatMap(client => client.getTokenSilently(options)), tap(token => this.authState.setAccessToken(token)), catchError(error => {\n      this.authState.refresh();\n      return throwError(error);\n    }));\n  }\n  /**\n   * Strips the query and fragment from the given uri\n   * @param uri The uri to remove the query and fragment from\n   */\n  stripQueryFrom(uri) {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n    return uri;\n  }\n  /**\n   * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n   * the interceptor route configuration.\n   * @param route The route to test\n   * @param request The HTTP request\n   */\n  canAttachToken(route, request) {\n    const testPrimitive = value => {\n      if (!value) {\n        return false;\n      }\n      const requestPath = this.stripQueryFrom(request.url);\n      if (value === requestPath) {\n        return true;\n      }\n      // If the URL ends with an asterisk, match using startsWith.\n      return value.indexOf('*') === value.length - 1 && request.url.startsWith(value.substr(0, value.length - 1));\n    };\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n      /* istanbul ignore if */\n      if (!route.uri && !route.uriMatcher) {\n        console.warn('Either a uri or uriMatcher is required when configuring the HTTP interceptor.');\n      }\n      return route.uriMatcher ? route.uriMatcher(request.url) : testPrimitive(route.uri);\n    }\n    return testPrimitive(route);\n  }\n  /**\n   * Tries to match a route from the SDK configuration to the HTTP request.\n   * If a match is found, the route configuration is returned.\n   * @param request The Http request\n   * @param config HttpInterceptorConfig\n   */\n  findMatchingRoute(request, config) {\n    return from(config.allowedList).pipe(first(route => this.canAttachToken(route, request), null));\n  }\n  allowAnonymous(route, err) {\n    return !!route && isHttpInterceptorRouteConfig(route) && !!route.allowAnonymous && ['login_required', 'consent_required'].includes(err.error);\n  }\n}\nAuthHttpInterceptor.ɵfac = function AuthHttpInterceptor_Factory(t) {\n  return new (t || AuthHttpInterceptor)(i0.ɵɵinject(AuthClientConfig), i0.ɵɵinject(Auth0ClientService), i0.ɵɵinject(AuthState));\n};\nAuthHttpInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthHttpInterceptor,\n  factory: AuthHttpInterceptor.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthHttpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AuthClientConfig\n    }, {\n      type: i1$1.Auth0Client,\n      decorators: [{\n        type: Inject,\n        args: [Auth0ClientService]\n      }]\n    }, {\n      type: AuthState\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of auth0-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth0ClientFactory, Auth0ClientService, AuthClientConfig, AuthConfigService, AuthGuard, AuthHttpInterceptor, AuthModule, AuthService, AuthState, isHttpInterceptorRouteConfig };","map":{"version":3,"names":["i0","VERSION","InjectionToken","Injectable","Optional","Inject","NgModule","BehaviorSubject","Subject","ReplaySubject","merge","defer","of","iif","from","throwError","scan","filter","distinctUntilChanged","switchMap","mergeMap","shareReplay","concatMap","catchError","tap","takeUntil","withLatestFrom","map","take","pluck","first","__rest","i1$1","Auth0Client","InMemoryCache","LocalStorageCache","User","Router","i1","useragent","name","version","Auth0ClientFactory","createClient","configFactory","config","get","Error","redirectUri","clientId","maxAge","httpInterceptor","rest","Object","assign","redirect_uri","window","location","origin","client_id","max_age","auth0Client","env","full","Auth0ClientService","isHttpInterceptorRouteConfig","def","AuthClientConfig","constructor","set","ɵfac","AuthConfigService","ɵprov","type","args","providedIn","undefined","decorators","AbstractNavigator","injector","router","_a","navigateByUrl","url","replaceState","Location","Injector","AuthState","isLoadingSubject$","refresh$","accessToken$","errorSubject$","isLoading$","asObservable","accessTokenTrigger$","pipe","acc","current","previous","isAuthenticatedTrigger$","loading","isAuthenticated","isAuthenticated$","user$","authenticated","getUser","idTokenClaims$","getIdTokenClaims","error$","setIsLoading","isLoading","next","refresh","setAccessToken","accessToken","setError","error","AuthService","navigator","authState","appStateSubject$","ngUnsubscribe$","appState$","checkSessionOrCallback$","isCallback","handleRedirectCallback","checkSession","shouldHandleCallback","errorPath","subscribe","ngOnDestroy","complete","loginWithRedirect","options","loginWithPopup","then","logout","localOnly","getAccessTokenSilently","client","detailedResponse","getTokenSilently","token","access_token","getAccessTokenWithPopup","getTokenWithPopup","result","appState","target","buildAuthorizeUrl","buildLogoutUrl","search","includes","skipRedirectCallback","AuthGuard","auth","canLoad","route","segments","canActivate","state","redirectIfUnauthenticated","canActivateChild","childRoute","loggedIn","AuthModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","ɵmod","ɵinj","AuthHttpInterceptor","intercept","req","allowedList","handle","findMatchingRoute","err","allowAnonymous","clone","headers","stripQueryFrom","uri","indexOf","substr","canAttachToken","request","testPrimitive","value","requestPath","length","startsWith","httpMethod","method","uriMatcher","console","warn"],"sources":["C:/Users/HP/Desktop/BBVA/angular-pwa/node_modules/@auth0/auth0-angular/fesm2015/auth0-auth0-angular.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { VERSION, InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject, ReplaySubject, merge, defer, of, iif, from, throwError } from 'rxjs';\nimport { scan, filter, distinctUntilChanged, switchMap, mergeMap, shareReplay, concatMap, catchError, tap, takeUntil, withLatestFrom, map, take, pluck, first } from 'rxjs/operators';\nimport { __rest } from 'tslib';\nimport * as i1$1 from '@auth0/auth0-spa-js';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nexport { InMemoryCache, LocalStorageCache, User } from '@auth0/auth0-spa-js';\nimport { Router } from '@angular/router';\nimport * as i1 from '@angular/common';\n\nvar useragent = { name: '@auth0/auth0-angular', version: '1.11.1' };\n\nclass Auth0ClientFactory {\n    static createClient(configFactory) {\n        const config = configFactory.get();\n        if (!config) {\n            throw new Error('Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set');\n        }\n        const { redirectUri, clientId, maxAge, httpInterceptor } = config, rest = __rest(config, [\"redirectUri\", \"clientId\", \"maxAge\", \"httpInterceptor\"]);\n        return new Auth0Client(Object.assign(Object.assign({ redirect_uri: redirectUri || window.location.origin, client_id: clientId, max_age: maxAge }, rest), { auth0Client: {\n                name: useragent.name,\n                version: useragent.version,\n                env: {\n                    'angular/core': VERSION.full,\n                },\n            } }));\n    }\n}\nconst Auth0ClientService = new InjectionToken('auth0.client');\n\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n * @param def The route definition type\n */\nfunction isHttpInterceptorRouteConfig(def) {\n    return typeof def !== 'string';\n}\n/**\n * Gets and sets configuration for the internal Auth0 client. This can be\n * used to provide configuration outside of using AuthModule.forRoot, i.e. from\n * a factory provided by APP_INITIALIZER.\n *\n * @usage\n *\n * ```js\n * // app.module.ts\n * // ---------------------------\n * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';\n *\n * // Provide an initializer function that returns a Promise\n * function configInitializer(\n *   http: HttpClient,\n *   config: AuthClientConfig\n * ) {\n *   return () =>\n *     http\n *       .get('/config')\n *       .toPromise()\n *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here\n * }\n *\n * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot\n * imports: [\n *   // other imports..\n *\n *   HttpClientModule,\n *   AuthModule.forRoot(),   //<- don't pass any config here\n * ],\n * providers: [\n *   {\n *     provide: APP_INITIALIZER,\n *     useFactory: configInitializer,    // <- pass your initializer function here\n *     deps: [HttpClient, AuthClientConfig],\n *     multi: true,\n *   },\n * ],\n * ```\n *\n */\nclass AuthClientConfig {\n    constructor(config) {\n        if (config) {\n            this.set(config);\n        }\n    }\n    /**\n     * Sets configuration to be read by other consumers of the service (see usage notes)\n     * @param config The configuration to set\n     */\n    set(config) {\n        this.config = config;\n    }\n    /**\n     * Gets the config that has been set by other consumers of the service\n     */\n    get() {\n        return this.config;\n    }\n}\nAuthClientConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthClientConfig, deps: [{ token: AuthConfigService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthClientConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthClientConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthClientConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [AuthConfigService]\n                }] }]; } });\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\nconst AuthConfigService = new InjectionToken('auth0-angular.config');\n\nclass AbstractNavigator {\n    constructor(location, injector) {\n        this.location = location;\n        try {\n            this.router = injector.get(Router);\n        }\n        catch (_a) { }\n    }\n    /**\n     * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n     * to `window.history.replaceState`.\n     * @param url The url to navigate to\n     */\n    navigateByUrl(url) {\n        if (this.router) {\n            this.router.navigateByUrl(url);\n            return;\n        }\n        this.location.replaceState(url);\n    }\n}\nAbstractNavigator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AbstractNavigator, deps: [{ token: i1.Location }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nAbstractNavigator.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AbstractNavigator, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AbstractNavigator, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Location }, { type: i0.Injector }]; } });\n\n/**\n * Tracks the Authentication State for the SDK\n */\nclass AuthState {\n    constructor(auth0Client) {\n        this.auth0Client = auth0Client;\n        this.isLoadingSubject$ = new BehaviorSubject(true);\n        this.refresh$ = new Subject();\n        this.accessToken$ = new ReplaySubject(1);\n        this.errorSubject$ = new ReplaySubject(1);\n        /**\n         * Emits boolean values indicating the loading state of the SDK.\n         */\n        this.isLoading$ = this.isLoadingSubject$.asObservable();\n        /**\n         * Trigger used to pull User information from the Auth0Client.\n         * Triggers when the access token has changed.\n         */\n        this.accessTokenTrigger$ = this.accessToken$.pipe(scan((acc, current) => {\n            return {\n                previous: acc.current,\n                current,\n            };\n        }, { current: null, previous: null }), filter(({ previous, current }) => previous !== current));\n        /**\n         * Trigger used to pull User information from the Auth0Client.\n         * Triggers when an event occurs that needs to retrigger the User Profile information.\n         * Events: Login, Access Token change and Logout\n         */\n        this.isAuthenticatedTrigger$ = this.isLoading$.pipe(filter((loading) => !loading), distinctUntilChanged(), switchMap(() => \n        // To track the value of isAuthenticated over time, we need to merge:\n        //  - the current value\n        //  - the value whenever the access token changes. (this should always be true of there is an access token\n        //    but it is safer to pass this through this.auth0Client.isAuthenticated() nevertheless)\n        //  - the value whenever refreshState$ emits\n        merge(defer(() => this.auth0Client.isAuthenticated()), this.accessTokenTrigger$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())), this.refresh$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())))));\n        /**\n         * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n         * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n         */\n        this.isAuthenticated$ = this.isAuthenticatedTrigger$.pipe(distinctUntilChanged(), shareReplay(1));\n        /**\n         * Emits details about the authenticated user, or null if not authenticated.\n         */\n        this.user$ = this.isAuthenticatedTrigger$.pipe(concatMap((authenticated) => authenticated ? this.auth0Client.getUser() : of(null)));\n        /**\n         * Emits ID token claims when authenticated, or null if not authenticated.\n         */\n        this.idTokenClaims$ = this.isAuthenticatedTrigger$.pipe(concatMap((authenticated) => authenticated ? this.auth0Client.getIdTokenClaims() : of(null)));\n        /**\n         * Emits errors that occur during login, or when checking for an active session on startup.\n         */\n        this.error$ = this.errorSubject$.asObservable();\n    }\n    /**\n     * Update the isLoading state using the provided value\n     * @param isLoading The new value for isLoading\n     */\n    setIsLoading(isLoading) {\n        this.isLoadingSubject$.next(isLoading);\n    }\n    /**\n     * Refresh the state to ensure the `isAuthenticated`, `user$` and `idTokenClaims$`\n     * reflect the most up-to-date values from  Auth0Client.\n     */\n    refresh() {\n        this.refresh$.next();\n    }\n    /**\n     * Update the access token, doing so will also refresh the state.\n     * @param accessToken The new Access Token\n     */\n    setAccessToken(accessToken) {\n        this.accessToken$.next(accessToken);\n    }\n    /**\n     * Emits the error in the `error$` observable.\n     * @param error The new error\n     */\n    setError(error) {\n        this.errorSubject$.next(error);\n    }\n}\nAuthState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthState, deps: [{ token: Auth0ClientService }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthState, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthState, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1$1.Auth0Client, decorators: [{\n                    type: Inject,\n                    args: [Auth0ClientService]\n                }] }]; } });\n\nclass AuthService {\n    constructor(auth0Client, configFactory, navigator, authState) {\n        this.auth0Client = auth0Client;\n        this.configFactory = configFactory;\n        this.navigator = navigator;\n        this.authState = authState;\n        this.appStateSubject$ = new ReplaySubject(1);\n        // https://stackoverflow.com/a/41177163\n        this.ngUnsubscribe$ = new Subject();\n        /**\n         * Emits boolean values indicating the loading state of the SDK.\n         */\n        this.isLoading$ = this.authState.isLoading$;\n        /**\n         * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n         * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n         */\n        this.isAuthenticated$ = this.authState.isAuthenticated$;\n        /**\n         * Emits details about the authenticated user, or null if not authenticated.\n         */\n        this.user$ = this.authState.user$;\n        /**\n         * Emits ID token claims when authenticated, or null if not authenticated.\n         */\n        this.idTokenClaims$ = this.authState.idTokenClaims$;\n        /**\n         * Emits errors that occur during login, or when checking for an active session on startup.\n         */\n        this.error$ = this.authState.error$;\n        /**\n         * Emits the value (if any) that was passed to the `loginWithRedirect` method call\n         * but only **after** `handleRedirectCallback` is first called\n         */\n        this.appState$ = this.appStateSubject$.asObservable();\n        const checkSessionOrCallback$ = (isCallback) => iif(() => isCallback, this.handleRedirectCallback(), defer(() => this.auth0Client.checkSession()));\n        this.shouldHandleCallback()\n            .pipe(switchMap((isCallback) => checkSessionOrCallback$(isCallback).pipe(catchError((error) => {\n            const config = this.configFactory.get();\n            this.navigator.navigateByUrl(config.errorPath || '/');\n            this.authState.setError(error);\n            return of(undefined);\n        }))), tap(() => {\n            this.authState.setIsLoading(false);\n        }), takeUntil(this.ngUnsubscribe$))\n            .subscribe();\n    }\n    /**\n     * Called when the service is destroyed\n     */\n    ngOnDestroy() {\n        // https://stackoverflow.com/a/41177163\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n    /**\n     * ```js\n     * loginWithRedirect(options);\n     * ```\n     *\n     * Performs a redirect to `/authorize` using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     *\n     * @param options The login options\n     */\n    loginWithRedirect(options) {\n        return from(this.auth0Client.loginWithRedirect(options));\n    }\n    /**\n     * ```js\n     * await loginWithPopup(options);\n     * ```\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     *\n     * IMPORTANT: This method has to be called from an event handler\n     * that was started by the user like a button click, for example,\n     * otherwise the popup will be blocked in most browsers.\n     *\n     * @param options The login options\n     * @param config Configuration for the popup window\n     */\n    loginWithPopup(options, config) {\n        return from(this.auth0Client.loginWithPopup(options, config).then(() => {\n            this.authState.refresh();\n        }));\n    }\n    /**\n     * ```js\n     * logout();\n     * ```\n     *\n     * Clears the application session and performs a redirect to `/v2/logout`, using\n     * the parameters provided as arguments, to clear the Auth0 session.\n     * If the `federated` option is specified it also clears the Identity Provider session.\n     * If the `localOnly` option is specified, it only clears the application session.\n     * It is invalid to set both the `federated` and `localOnly` options to `true`,\n     * and an error will be thrown if you do.\n     * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n     *\n     * @param options The logout options\n     */\n    logout(options) {\n        const logout = this.auth0Client.logout(options) || of(null);\n        from(logout).subscribe(() => {\n            if (options === null || options === void 0 ? void 0 : options.localOnly) {\n                this.authState.refresh();\n            }\n        });\n    }\n    /**\n     * ```js\n     * getAccessTokenSilently(options).subscribe(token => ...)\n     * ```\n     *\n     * If there's a valid token stored, return it. Otherwise, opens an\n     * iframe with the `/authorize` URL using the parameters provided\n     * as arguments. Random and secure `state` and `nonce` parameters\n     * will be auto-generated. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * If refresh tokens are used, the token endpoint is called directly with the\n     * 'refresh_token' grant. If no refresh token is available to make this call,\n     * the SDK falls back to using an iframe to the '/authorize' URL.\n     *\n     * This method may use a web worker to perform the token call if the in-memory\n     * cache is used.\n     *\n     * If an `audience` value is given to this function, the SDK always falls\n     * back to using an iframe to make the token exchange.\n     *\n     * Note that in all cases, falling back to an iframe requires access to\n     * the `auth0` cookie, and thus will not work in browsers that block third-party\n     * cookies by default (Safari, Brave, etc).\n     *\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options = {}) {\n        return of(this.auth0Client).pipe(concatMap((client) => options.detailedResponse === true\n            ? client.getTokenSilently(Object.assign(Object.assign({}, options), { detailedResponse: true }))\n            : client.getTokenSilently(options)), tap((token) => this.authState.setAccessToken(typeof token === 'string' ? token : token.access_token)), catchError((error) => {\n            this.authState.setError(error);\n            this.authState.refresh();\n            return throwError(error);\n        }));\n    }\n    /**\n     * ```js\n     * getTokenWithPopup(options).subscribe(token => ...)\n     * ```\n     *\n     * Get an access token interactively.\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     */\n    getAccessTokenWithPopup(options) {\n        return of(this.auth0Client).pipe(concatMap((client) => client.getTokenWithPopup(options)), tap((token) => this.authState.setAccessToken(token)), catchError((error) => {\n            this.authState.setError(error);\n            this.authState.refresh();\n            return throwError(error);\n        }));\n    }\n    /**\n     * ```js\n     * getUser(options).subscribe(user => ...);\n     * ```\n     *\n     * Returns the user information if available (decoded\n     * from the `id_token`).\n     *\n     * If you provide an audience or scope, they should match an existing Access Token\n     * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n     * scope and audience to look up the ID Token)\n     *\n     * @remarks\n     *\n     * The returned observable will emit once and then complete.\n     *\n     * @typeparam TUser The type to return, has to extend {@link User}.\n     * @param options The options to get the user\n     */\n    getUser(options) {\n        return defer(() => this.auth0Client.getUser(options));\n    }\n    /**\n     * ```js\n     * getIdTokenClaims(options).subscribe(claims => ...);\n     * ```\n     *\n     * Returns all claims from the id_token if available.\n     *\n     * If you provide an audience or scope, they should match an existing Access Token\n     * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n     * scope and audience to look up the ID Token)\n     *\n     * @remarks\n     *\n     * The returned observable will emit once and then complete.\n     *\n     * @param options The options to get the Id token claims\n     */\n    getIdTokenClaims(options) {\n        return defer(() => this.auth0Client.getIdTokenClaims(options));\n    }\n    /**\n     * ```js\n     * handleRedirectCallback(url).subscribe(result => ...)\n     * ```\n     *\n     * After the browser redirects back to the callback page,\n     * call `handleRedirectCallback` to handle success and error\n     * responses from Auth0. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * Calling this method also refreshes the authentication and user states.\n     *\n     * @param url The URL to that should be used to retrieve the `state` and `code` values. Defaults to `window.location.href` if not given.\n     */\n    handleRedirectCallback(url) {\n        return defer(() => this.auth0Client.handleRedirectCallback(url)).pipe(withLatestFrom(this.authState.isLoading$), tap(([result, isLoading]) => {\n            var _a;\n            if (!isLoading) {\n                this.authState.refresh();\n            }\n            const appState = result === null || result === void 0 ? void 0 : result.appState;\n            const target = (_a = appState === null || appState === void 0 ? void 0 : appState.target) !== null && _a !== void 0 ? _a : '/';\n            if (appState) {\n                this.appStateSubject$.next(appState);\n            }\n            this.navigator.navigateByUrl(target);\n        }), map(([result]) => result));\n    }\n    /**\n     * ```js\n     * buildAuthorizeUrl().subscribe(url => ...)\n     * ```\n     *\n     * Builds an `/authorize` URL for loginWithRedirect using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     * @param options The options\n     * @returns A URL to the authorize endpoint\n     */\n    buildAuthorizeUrl(options) {\n        return defer(() => this.auth0Client.buildAuthorizeUrl(options));\n    }\n    /**\n     * ```js\n     * buildLogoutUrl().subscribe(url => ...)\n     * ```\n     * Builds a URL to the logout endpoint.\n     *\n     * @param options The options used to configure the parameters that appear in the logout endpoint URL.\n     * @returns a URL to the logout endpoint using the parameters provided as arguments.\n     */\n    buildLogoutUrl(options) {\n        return of(this.auth0Client.buildLogoutUrl(options));\n    }\n    shouldHandleCallback() {\n        return of(location.search).pipe(map((search) => {\n            return ((search.includes('code=') || search.includes('error=')) &&\n                search.includes('state=') &&\n                !this.configFactory.get().skipRedirectCallback);\n        }));\n    }\n}\nAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthService, deps: [{ token: Auth0ClientService }, { token: AuthClientConfig }, { token: AbstractNavigator }, { token: AuthState }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Auth0Client, decorators: [{\n                    type: Inject,\n                    args: [Auth0ClientService]\n                }] }, { type: AuthClientConfig }, { type: AbstractNavigator }, { type: AuthState }]; } });\n\nclass AuthGuard {\n    constructor(auth) {\n        this.auth = auth;\n    }\n    canLoad(route, segments) {\n        return this.auth.isAuthenticated$.pipe(take(1));\n    }\n    canActivate(next, state) {\n        return this.redirectIfUnauthenticated(state);\n    }\n    canActivateChild(childRoute, state) {\n        return this.redirectIfUnauthenticated(state);\n    }\n    redirectIfUnauthenticated(state) {\n        return this.auth.isAuthenticated$.pipe(tap((loggedIn) => {\n            if (!loggedIn) {\n                this.auth.loginWithRedirect({\n                    appState: { target: state.url },\n                });\n            }\n        }));\n    }\n}\nAuthGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthGuard, deps: [{ token: AuthService }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthGuard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: AuthService }]; } });\n\nclass AuthModule {\n    /**\n     * Initialize the authentication module system. Configuration can either be specified here,\n     * or by calling AuthClientConfig.set (perhaps from an APP_INITIALIZER factory function).\n     * @param config The optional configuration for the SDK.\n     */\n    static forRoot(config) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                AuthService,\n                AuthGuard,\n                {\n                    provide: AuthConfigService,\n                    useValue: config,\n                },\n                {\n                    provide: Auth0ClientService,\n                    useFactory: Auth0ClientFactory.createClient,\n                    deps: [AuthClientConfig],\n                },\n            ],\n        };\n    }\n}\nAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule });\nAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule, decorators: [{\n            type: NgModule\n        }] });\n\nclass AuthHttpInterceptor {\n    constructor(configFactory, auth0Client, authState) {\n        this.configFactory = configFactory;\n        this.auth0Client = auth0Client;\n        this.authState = authState;\n    }\n    intercept(req, next) {\n        var _a;\n        const config = this.configFactory.get();\n        if (!((_a = config.httpInterceptor) === null || _a === void 0 ? void 0 : _a.allowedList)) {\n            return next.handle(req);\n        }\n        return this.findMatchingRoute(req, config.httpInterceptor).pipe(concatMap((route) => iif(\n        // Check if a route was matched\n        () => route !== null, \n        // If we have a matching route, call getTokenSilently and attach the token to the\n        // outgoing request\n        of(route).pipe(pluck('tokenOptions'), concatMap((options) => {\n            return this.getAccessTokenSilently(options).pipe(catchError((err) => {\n                if (this.allowAnonymous(route, err)) {\n                    return of('');\n                }\n                this.authState.setError(err);\n                return throwError(err);\n            }));\n        }), switchMap((token) => {\n            // Clone the request and attach the bearer token\n            const clone = token\n                ? req.clone({\n                    headers: req.headers.set('Authorization', `Bearer ${token}`),\n                })\n                : req;\n            return next.handle(clone);\n        })), \n        // If the URI being called was not found in our httpInterceptor config, simply\n        // pass the request through without attaching a token\n        next.handle(req))));\n    }\n    /**\n     * Duplicate of AuthService.getAccessTokenSilently, but with a slightly different error handling.\n     * Only used internally in the interceptor.\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options) {\n        return of(this.auth0Client).pipe(concatMap((client) => client.getTokenSilently(options)), tap((token) => this.authState.setAccessToken(token)), catchError((error) => {\n            this.authState.refresh();\n            return throwError(error);\n        }));\n    }\n    /**\n     * Strips the query and fragment from the given uri\n     * @param uri The uri to remove the query and fragment from\n     */\n    stripQueryFrom(uri) {\n        if (uri.indexOf('?') > -1) {\n            uri = uri.substr(0, uri.indexOf('?'));\n        }\n        if (uri.indexOf('#') > -1) {\n            uri = uri.substr(0, uri.indexOf('#'));\n        }\n        return uri;\n    }\n    /**\n     * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n     * the interceptor route configuration.\n     * @param route The route to test\n     * @param request The HTTP request\n     */\n    canAttachToken(route, request) {\n        const testPrimitive = (value) => {\n            if (!value) {\n                return false;\n            }\n            const requestPath = this.stripQueryFrom(request.url);\n            if (value === requestPath) {\n                return true;\n            }\n            // If the URL ends with an asterisk, match using startsWith.\n            return (value.indexOf('*') === value.length - 1 &&\n                request.url.startsWith(value.substr(0, value.length - 1)));\n        };\n        if (isHttpInterceptorRouteConfig(route)) {\n            if (route.httpMethod && route.httpMethod !== request.method) {\n                return false;\n            }\n            /* istanbul ignore if */\n            if (!route.uri && !route.uriMatcher) {\n                console.warn('Either a uri or uriMatcher is required when configuring the HTTP interceptor.');\n            }\n            return route.uriMatcher\n                ? route.uriMatcher(request.url)\n                : testPrimitive(route.uri);\n        }\n        return testPrimitive(route);\n    }\n    /**\n     * Tries to match a route from the SDK configuration to the HTTP request.\n     * If a match is found, the route configuration is returned.\n     * @param request The Http request\n     * @param config HttpInterceptorConfig\n     */\n    findMatchingRoute(request, config) {\n        return from(config.allowedList).pipe(first((route) => this.canAttachToken(route, request), null));\n    }\n    allowAnonymous(route, err) {\n        return (!!route &&\n            isHttpInterceptorRouteConfig(route) &&\n            !!route.allowAnonymous &&\n            ['login_required', 'consent_required'].includes(err.error));\n    }\n}\nAuthHttpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthHttpInterceptor, deps: [{ token: AuthClientConfig }, { token: Auth0ClientService }, { token: AuthState }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthHttpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthHttpInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthHttpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: AuthClientConfig }, { type: i1$1.Auth0Client, decorators: [{\n                    type: Inject,\n                    args: [Auth0ClientService]\n                }] }, { type: AuthState }]; } });\n\n/*\n * Public API Surface of auth0-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth0ClientFactory, Auth0ClientService, AuthClientConfig, AuthConfigService, AuthGuard, AuthHttpInterceptor, AuthModule, AuthService, AuthState, isHttpInterceptorRouteConfig };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}