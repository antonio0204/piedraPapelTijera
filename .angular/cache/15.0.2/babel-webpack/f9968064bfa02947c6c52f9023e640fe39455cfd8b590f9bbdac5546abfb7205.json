{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class GameService {\n  constructor() {}\n  /**\r\n   * Math Random para generar un random y multiplicamos por 3\r\n   * Redondeamos el entero superior, quedando 0,1,2 como posibles resultados\r\n   * y con ello selecciona Piedra (r), Papel (p) ó Tijera (s)\r\n   */\n  getComputerChoice() {\n    const choices = ['r', 'p', 's']; // Roca, Pape, Tijeras\n    const randomChoice = Math.floor(Math.random() * 3);\n    return choices[randomChoice];\n  }\n  game(userChoice) {\n    const playUserComp = userChoice + this.getComputerChoice();\n    console.log(`Jugada realizada: ${playUserComp}`);\n    let playStatus;\n    switch (playUserComp) {\n      // Ganamos\n      case 'rs':\n      case 'sp':\n      case 'pr':\n        playStatus = {\n          message: 'Ganas a la computadora',\n          userAdd: 1,\n          compAdd: 0\n        };\n        break;\n      // Gana la computadora\n      case 'rp':\n      case 'ps':\n      case 'sr':\n        playStatus = {\n          message: 'Gana la computadora',\n          userAdd: 0,\n          compAdd: 1\n        };\n        break;\n      // Empatamos\n      case 'rr':\n      case 'pp':\n      case 'ss':\n        playStatus = {\n          message: 'Habéis elegido la misma jugada y habéis empatado',\n          userAdd: 0,\n          compAdd: 0\n        };\n        break;\n    }\n    return playStatus;\n  }\n}\nGameService.ɵfac = function GameService_Factory(t) {\n  return new (t || GameService)();\n};\nGameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GameService,\n  factory: GameService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAEtBC,eAAe;EACf;;;;;EAKQC,iBAAiB;IACvB,MAAMC,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACjC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;IAClD,OAAOJ,OAAO,CAACC,YAAY,CAAC;EAC9B;EAEAI,IAAI,CACFC,UAAkB;IAMlB,MAAMC,YAAY,GAAGD,UAAU,GAAG,IAAI,CAACP,iBAAiB,EAAE;IAC1DS,OAAO,CAACC,GAAG,CAAC,qBAAqBF,YAAY,EAAE,CAAC;IAChD,IAAIG,UAIH;IACD,QAAQH,YAAY;MAClB;MACA,KAAK,IAAI;MACT,KAAK,IAAI;MACT,KAAK,IAAI;QACPG,UAAU,GAAG;UACXC,OAAO,EAAE,wBAAwB;UACjCC,OAAO,EAAE,CAAC;UACVC,OAAO,EAAE;SACV;QACD;MACF;MACA,KAAK,IAAI;MACT,KAAK,IAAI;MACT,KAAK,IAAI;QACPH,UAAU,GAAG;UACXC,OAAO,EAAE,qBAAqB;UAC9BC,OAAO,EAAE,CAAC;UACVC,OAAO,EAAE;SACV;QACD;MACF;MACA,KAAK,IAAI;MACT,KAAK,IAAI;MACT,KAAK,IAAI;QACPH,UAAU,GAAG;UACXC,OAAO,EAAE,kDAAkD;UAC3DC,OAAO,EAAE,CAAC;UACVC,OAAO,EAAE;SACV;QACD;IAAM;IAEV,OAAOH,UAAU;EACnB;;;mBA7DWb,WAAW;AAAA;;SAAXA,WAAW;EAAAiB,SAAXjB,WAAW;EAAAkB,YAFV;AAAM","names":["GameService","constructor","getComputerChoice","choices","randomChoice","Math","floor","random","game","userChoice","playUserComp","console","log","playStatus","message","userAdd","compAdd","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\BBVA\\angular-pwa\\src\\app\\services\\game.service.ts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  constructor() {}\n  /**\n   * Math Random para generar un random y multiplicamos por 3\n   * Redondeamos el entero superior, quedando 0,1,2 como posibles resultados\n   * y con ello selecciona Piedra (r), Papel (p) ó Tijera (s)\n   */\n  private getComputerChoice(): string {\n    const choices = ['r', 'p', 's']; // Roca, Pape, Tijeras\n    const randomChoice = Math.floor(Math.random() * 3);\n    return choices[randomChoice];\n  }\n\n  game(\n    userChoice: string\n  ): {\n    message: string;\n    userAdd: number;\n    compAdd: number;\n  } {\n    const playUserComp = userChoice + this.getComputerChoice();\n    console.log(`Jugada realizada: ${playUserComp}`);\n    let playStatus: {\n      message: string;\n      userAdd: number;\n      compAdd: number;\n    };\n    switch (playUserComp) {\n      // Ganamos\n      case 'rs':\n      case 'sp':\n      case 'pr':\n        playStatus = {\n          message: 'Ganas a la computadora',\n          userAdd: 1,\n          compAdd: 0,\n        };\n        break;\n      // Gana la computadora\n      case 'rp':\n      case 'ps':\n      case 'sr':\n        playStatus = {\n          message: 'Gana la computadora',\n          userAdd: 0,\n          compAdd: 1,\n        };\n        break;\n      // Empatamos\n      case 'rr':\n      case 'pp':\n      case 'ss':\n        playStatus = {\n          message: 'Habéis elegido la misma jugada y habéis empatado',\n          userAdd: 0,\n          compAdd: 0,\n        };\n        break;\n    }\n    return playStatus;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}